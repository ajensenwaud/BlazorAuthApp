@page "/confirmreset/{ResetKey}"
@using TxB.Models
@using TxB.Services
@using TxB.Data
@using TxB.Shared.SemanticUI
@inject NavigationManager NavManager
@inject AuthenticationService AuthenticationService;

<Header4>Reset password</Header4>

<AuthorizeView>
    <NotAuthorized>
        <EditForm class="ui form" Model="ResetPasswordModel" OnValidSubmit="Confirm" Context="LOL">
            <DataAnnotationsValidator />
            <div class="ui container">
                <Field Label="New password">
                    <InputText type="password" @bind-Value="ResetPasswordModel.NewPassword" id="newPassword"></InputText>
                    <ValidationMessage For="() => ResetPasswordModel.NewPassword"/>
                </Field>
                <button class="ui button">Confirm new password</button>
            </div>
            @if (PasswordIsReset)
            {
                <Confirmation Header="Password has been reset" Show=@PasswordIsReset>Thank you. Your password has been reset. Please <a href="/login">proceed to the login page</a> to log in with your new credentials.</Confirmation>
            }
            @if (ShowError)
            {
                <Warning Header="Unexpected error" Show=@ShowError>Caught unexpected error when resetting your password. Please contact support.</Warning>
            }
        </EditForm>
    </NotAuthorized>
</AuthorizeView>


@code {

    [Parameter]
    public string ResetKey { get; set; }

    public bool PasswordIsReset { get; set; } = false;
    
    public bool ShowError { get; set; } = false;

    public ResetPasswordModel ResetPasswordModel { get; set; } = new();

    public ApplicationUser User { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (string.IsNullOrWhiteSpace(ResetKey))
        {
            NavManager.NavigateTo("/");
            return;
        }

        try
        {
            User = AuthenticationService.FindByResetId(ResetKey);
        }
        catch (Exception ex)
        {
            ShowError = true;
        }
    }
    
    public async void Confirm()
    {
        if (string.IsNullOrWhiteSpace(ResetPasswordModel.NewPassword) || ResetPasswordModel.NewPassword.Length < 8)
            return;
            
        var res = await AuthenticationService.ResetPassword(User.Id, ResetPasswordModel.NewPassword);
        if (res.Succeeded)
        {
            PasswordIsReset = true;
        }
        else
        {
            ShowError = true;
        }
    }

}