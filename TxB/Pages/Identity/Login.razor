@page "/login"
@inherits BlazorAuthComponentBase;
@using TxB.Data
@using TxB.Models
@using TxB.Services
@using TxB.Shared.Components
@using TxB.Shared.SemanticUI
@inject AuthenticationService WebsiteAuth
@inject SessionState SessionState;
@inject NavigationManager NavManager;
@inject ILogger<Login> Logger;

<h3>Login</h3>

<AuthorizeView>
    <Authorized>
        <div class="ui two column stackable grid">
            <div class="column">
                <h2>Welcome</h2>
                <p>
                    Welcome to the site, @SessionState?.CurrentUser?.FirstName!
                </p>
            </div>
            <div class="column">
                <h2>Example body text</h2>
                <p>Nullam quis risus eget <a href="#">urna mollis ornare</a> vel eu leo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Nullam id dolor id nibh ultricies vehicula.</p>
                <p>
                    <small>This line of text is meant to be treated as fine print.</small>
                </p>
                <p>The following snippet of text is <strong>rendered as bold text</strong>.</p>
                <p>The following snippet of text is <em>rendered as italicized text</em>.</p>
                <p>An abbreviation of the word attribute is <abbr title="attribute">attr</abbr>.</p>
            </div>

        </div>


        <div class="grid">
            <a href="Identity/Account/Manage">Hello, @context.User.Identity?.Name!</a>
            <form method="post" action="/logout">
                <button type="submit" class="nav-link btn btn-link">Log out</button>
            </form>
        </div>
    </Authorized>
    <NotAuthorized>
        <Warning Show="@ShowError" Header="Authentication error">
            <p>@ErrorText</p>
            <p>Do you wish to <a href="/register">create a new account</a> or <a href="/recover">recover your password</a>?</p>
        </Warning>
        <EditForm class="ui form" Model="LoginFormModel" Context="logincontext">
            <div class="container">
                <div class="field">
                    <label>Email</label>
                    <InputText type="email" @bind-Value="LoginFormModel.Email" id="email"></InputText>
                </div>
                <div class="field">
                    <label>Password</label>
                    <InputText type="password" @bind-Value="LoginFormModel.Password" id="password"></InputText>
                </div>
                <div class="field">
                    <div class="ui checkbox">
                        <InputCheckbox type="checkbox" id="rememberMe" @bind-Value="LoginFormModel.RememberMe"/>
                        <label>Remember me</label>
                    </div>
                </div>
                <button class="ui button" @onclick="DoLogin">Log in</button>
                <button class="ui button" @onclick="ForgotPassword">Forgot password?</button>
            </div>
        </EditForm>


    </NotAuthorized>
</AuthorizeView>


@code {
    private LoginFormModel LoginFormModel { get; } = new();
    private bool ShowError { get; set; }
    private string ErrorText { get; set; } = string.Empty;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Console.WriteLine("OnInit");
    }

    async void DoLogin()
    {
        try
        {
            var result = await WebsiteAuth.LoginAsync(LoginFormModel.Email, LoginFormModel.Password, LoginFormModel.RememberMe);
            if (result.Item1 == AuthenticationService.AuthenticationResult.Success)
            {
                var usr = result.Item3;
            }
            else
            {
                Logger.LogError("Unknown error occurred during login for user {0}. Status = {1}. .Net says: {2}", result.Item3, result.Item1, result.Item2);
                SetError("Incorrect username or password.");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError("Unknown error occurred during login for user {0}, {1}", LoginFormModel.Email, ex);
            SetError("An unknown error occurred.");
        }
    }

    async void ForgotPassword()
    {
        NavManager.NavigateTo("/reset");
    }

    protected void SetError(string error)
    {
        ShowError = true;
        ErrorText = error;
        StateHasChanged();
    }


}