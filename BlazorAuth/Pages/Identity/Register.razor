@page "/register"
@inherits BlazorAuthComponentBase;
@using BlazorAuth.Data
@using BlazorAuth.Services
@using BlazorAuth.Shared.Components
@using BlazorAuth.Shared.SemanticUI
@inject AuthenticationService WebsiteAuthenticator
@inject NavigationManager NavManager;
@inject ILogger<Register> Logger;

<h3>Register new account</h3>

<AuthorizeView>
    <Authorized>
        <div Context="Rubbish">
            <h1>Have to redirect somehow...</h1>
        </div>
    </Authorized>
    <NotAuthorized>
        <EditForm Context="registration" EditContext="@editContext" class="ui form" OnSubmit="@HandleValidSubmit">
            <h4 class="ui dividing header">New user account</h4>
            <CustomValidation @ref="customValidation"/>
            <DataAnnotationsValidator/>
            <div class="field">
                <label>About you</label>
                <small>Providing your name is optional. Your name or email will not be visible to other users.</small>
                <div class="two fields">
                    <div class="field">
                        <InputText type="text" @bind-Value="RegisterFormModel.FirstName" id="firstname" placeholder="First name"></InputText>
                        <ValidationMessage For="() => RegisterFormModel.FirstName"/>
                    </div>
                    <div class="field">
                        <InputText type="text" @bind-Value="RegisterFormModel.LastName" id="lastname" placeholder="Last name"></InputText>
                        <ValidationMessage For="() => RegisterFormModel.LastName"/>
                    </div>
                </div>
            </div>
            <div class="field">
                <label>Username</label>
                <small>Choose your username wisely. The username will be visible to other users on the site.</small>
                <InputText type="text" @bind-Value="RegisterFormModel.Username" id="username" @onfocusout="OnFocusOutUsername"></InputText>
                <ValidationMessage class="ui red message" For="() => RegisterFormModel.Username"/>
                <LookupSpinner @ref="usernameSpinner" Text="" Status="LookupSpinner.SearchStatus.NotActivated"/>
            </div>
            <div class="field">
                <label>Email</label>
                <small>You must provide a working email address to register. Your email address will not be visible to other users. We will not share your email address with third parties.</small>
                <InputText type="email" @bind-Value="RegisterFormModel.Email" id="email" @onfocusout="OnFocusOutEmail"></InputText>
                <ValidationMessage class="ui red message" For="() => RegisterFormModel.Email"/>
                <LookupSpinner @ref="emailSpinner" Text="" Status="LookupSpinner.SearchStatus.NotActivated"/>
            </div>


            <div class="field">
                <label>Password</label>
                <small>Password must be at least 8 characters long and have (at least) one digit, one upper case character, one upper case character, and an non-alphanumeric character. Pick a secure one.</small>
                <InputText type="password" @bind-Value="RegisterFormModel.Password" id="password"></InputText>
                <ValidationMessage For="() => RegisterFormModel.Password"/>
            </div>
            <div class="ui segment">
                <div class="field">
                    <div class="ui toggle checkbox">
                        <InputCheckbox id="rememberMe" @bind-Value="RegisterFormModel.Above18"/>
                        <label>
                            I am aged 18 or above
                        </label>
                        <ValidationMessage For="() => RegisterFormModel.Above18"/>
                    </div>
                </div>
            </div>
            <button type="submit" class="ui button" disabled="@(!RegisterFormModel.Above18)">Register me</button>
        </EditForm>
        <Confirmation Show="@ShowConfirmation" Header="Account created">
            Your account has been registered, but needs to be activated. Please check your inbox for an email with instructions on how to activate the account and log in.
        </Confirmation>
        <Warning Show="@ShowError" Header="Registration error">
            <p>@ErrorText</p>
            An error occurred during registration of the account. Please contact us via <a href="/support">the support page.</a>
        </Warning>

    </NotAuthorized>
</AuthorizeView>

@code {
    private LookupSpinner? emailSpinner;
    private LookupSpinner? usernameSpinner;

    private EditContext? editContext { get; set; }
    private CustomValidation? customValidation;
    private RegisterFormModel RegisterFormModel { get; } = new();

    private string ErrorText { get; set; } = string.Empty;

    private bool ShowError { get; set; }

    private bool ShowConfirmation { get; set; }

    protected override void OnInitialized()
    {
        editContext = new EditContext(RegisterFormModel);
        base.OnInitialized();
    }

    private void HandleValidSubmit()
    {
        if (editContext is null)
            return;

        var valid = editContext.Validate();
        if (!valid)
        {
            return;
        }
        customValidation?.ClearErrors();
        var errors = new Dictionary<string, List<string>>();

        var cUsername = WebsiteAuthenticator.LookupByUsername(RegisterFormModel.Username);
        var cEmail = WebsiteAuthenticator.LookupByEmail(RegisterFormModel.Email);

        if (cUsername > 0)
            errors.Add(nameof(RegisterFormModel.Username),
                new List<string> { "Username already taken! Please pick another one." });

        if (cEmail > 0)
            errors.Add(nameof(RegisterFormModel.Email),
                new List<string> { "An account with that email address already exists. Please try another email address or log in with the existing account instead." });


        if (errors.Any())
        {
            customValidation?.DisplayErrors(errors);
        }
        else
        {
            TryRegister();
        }
    }

    private async void OnFocusOutEmail(FocusEventArgs e)
    {
        if (emailSpinner is null)
            return;

        if (string.IsNullOrWhiteSpace(RegisterFormModel.Email))
        {
            emailSpinner.SetStatus(LookupSpinner.SearchStatus.NotActivated, "");
            await Task.Delay(1);
            return;
        }

        emailSpinner.SetStatus(LookupSpinner.SearchStatus.Searching, "Checking if email is available");
        await Task.Delay(1);
        var cEmail = WebsiteAuthenticator.LookupByEmail(RegisterFormModel.Email);
        if (cEmail == 0)
        {
            emailSpinner.SetStatus(LookupSpinner.SearchStatus.OK, "Email available.");
        }
        else
        {
            emailSpinner.SetStatus(LookupSpinner.SearchStatus.NotOK, "Email already used for a different account.");
        }
        await Task.Delay(1);
    }

    private async void OnFocusOutUsername(FocusEventArgs e)
    {
        if (usernameSpinner is null)
            return;

        if (string.IsNullOrWhiteSpace(RegisterFormModel.Username))
        {
            usernameSpinner.SetStatus(LookupSpinner.SearchStatus.NotActivated, "");
            await Task.Delay(1);
            return;
        }

        usernameSpinner.SetStatus(LookupSpinner.SearchStatus.Searching, "Checking if the user name is available");
        await Task.Delay(1);
        var cEmail = WebsiteAuthenticator.LookupByUsername(RegisterFormModel.Username);
        if (cEmail == 0)
        {
            usernameSpinner.SetStatus(LookupSpinner.SearchStatus.OK, "User name is available.");
        }
        else
        {
            usernameSpinner.SetStatus(LookupSpinner.SearchStatus.NotOK, "User name already used for a different account.");
        }
        await Task.Delay(1);
    }

    private async void TryRegister()
    {
        try
        {
            var u = await WebsiteAuthenticator.CreateUserAsync(RegisterFormModel, false, false, true);
            if (u.Item2.Succeeded)
            {
                ShowConfirmation = u.Item2.Succeeded;
                StateHasChanged();
            }
            else
            {
                ShowError = true;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            ErrorText = $"Unexpected error {ex}";
            ShowError = true;
            StateHasChanged();
        }
    }

}