@page "/admin/users"
@inherits BlazorAuthComponentBase;
@using BlazorAuth.Data
@using Microsoft.AspNetCore.Identity
@using BlazorAuth.Shared.Components
@inject IdentityContext IdContext;
@inject UserManager<BlazorAuthUser> UserManager;
@inject SignInManager<BlazorAuthUser> SignInManager;
@inject ILogger<ManageUsers> logger;
@inject SessionState sessionState;
@inject NavigationManager navMgr;
<h3>Admin Zone</h3>

<p>
    Welcome, @sessionState.CurrentUser?.FirstName ?? "" @sessionState.CurrentUser?.LastName ?? "" (@sessionState.CurrentUser?.Email ?? "")
</p>
<p>
    We know this about you:<br/>
    Roles: @string.Join(",", sessionState.CurrentRoles)<br/>
</p>

<AuthorizeView Roles="Admin, User">
    <Authorized>
        <div>
            <table class="ui celled table">
                <tr>
                    <!-- <th>ID</th> -->
                    <th>User name</th>
                    <th>Email</th>
                    <th>Email confirmed</th>
                    <th>First name</th>
                    <th>Last name</th>
                    <th>Created</th>
                    <th>Is 18 or above</th>
                    <th>Locked out</th>
                    <th>Access failed count</th>
                    <th>Commands</th>

                </tr>
                @foreach (var u in Users)
                {
                    <tr>
                        <td data-label="User name">@u.UserName</td>
                        <td data-label="Email">@u.Email</td>
                        <td data-label="Email confirmed">@u.EmailConfirmed</td>
                        <td data-label="First name">@u.FirstName</td>
                        <td data-label="Last name">@u.LastName</td>
                        <td data-label="Created">@u.CreatedAt</td>
                        <td data-label="Is 18 or above">@u.Is18OrAbove</td>
                        <td data-label="Locked out">@u.LockoutEnabled</td>
                        <td data-label="Access failed count">@u.AccessFailedCount</td>
                        <td data-label="Commands">
                            <button class="ui button" @onclick="@(() => Delete(u))">Delete</button>
                            <button class="ui button" @onclick="@(() => MakeAdmin(u))">Promote to admin</button>
                            <button class="ui button" @onclick="@(() => Demote(u))">Remove admin role</button>
                            <button class="ui button" @onclick="@(() => EditUser(u))">Edit</button>
                        </td>
                    </tr>
                }
            </table>
        </div>
    </Authorized>
</AuthorizeView>

@code {
    private List<BlazorAuthUser> Users { get; set; }
    // protected RentalRatingsUser CurrentUser? { get; set; }

    protected async Task<string> GetRoles(BlazorAuthUser rru)
    {
        var roles = await UserManager.GetRolesAsync(rru);
        var str = string.Join(",", roles.Select(i => i));
    // return string.Join(",", roles);
        return str;
    }

    void Refresh()
    {
        Users = IdContext.Users.ToList();
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        Users = IdContext.Users.ToList();
    }

    protected async void Unlock(BlazorAuthUser rru)
    {
        await UserManager.SetLockoutEnabledAsync(rru, false);
        Refresh();
    }

    protected async void Lock(BlazorAuthUser rru)
    {
        await UserManager.SetLockoutEnabledAsync(rru, true);
        Refresh();
    }

    protected async void Delete(BlazorAuthUser rru)
    {
        await UserManager.DeleteAsync(rru);
        Refresh();
    }

    protected async void MakeAdmin(BlazorAuthUser rru)
    {
        await UserManager.AddToRoleAsync(rru, "Admin");
        Refresh();
    }

    protected async void Demote(BlazorAuthUser rru)
    {
        await UserManager.RemoveFromRoleAsync(rru, "Admin");
        Refresh();
    }

    protected void EditUser(BlazorAuthUser rru)
    {
        navMgr.NavigateTo($"/admin/edituser/{rru.Id}");
    }

}